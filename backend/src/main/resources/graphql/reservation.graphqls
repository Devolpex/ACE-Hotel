type Query {
  getReservation(id: ID!): Reservation
  getReservationsList: [Reservation]
  getPaginatedReservations(page: Int, size: Int, sortBy: String, orderBy: String): ReservationPage

}

type Mutation {
  createReservation(input: ReservationREQ): Reservation
  updateReservation(id: ID!, input: ReservationREQ): Reservation
  deleteReservation(id: ID!): Boolean
}


# Output Schemas
type Reservation {
  id: ID
  client: Client
  chambre: Chambre
  dateDebut: String
  dateFin: String
  preferences: String
}

type Client {
  id: ID
  nom: String
  prenom: String
  email: String
  telephone: String
}

type Chambre {
  id: ID
  type: String
  prix: Float
  disponible: Boolean
}

# Input Schemas
input ReservationREQ {
  client: ClientDTO!
  chambreId: ID!
  dateDebut: String!
  dateFin: String!
  preferences: String
}

input ClientDTO {
  id: ID
  email: String!
  nom: String!
  prenom: String!
  telephone: String!
}

# Pagination Schema
type ReservationPage {
  content: [Reservation]
  pageable: Pageable
  totalElements: Int
  totalPages: Int
  last: Boolean
  first: Boolean
  size: Int
  number: Int
  numberOfElements: Int
  empty: Boolean
}

type Pageable {
    pageNumber: Int
    pageSize: Int
    offset: Int
    paged: Boolean
    unpaged: Boolean
    sort: Sort
}

type Sort {
    sorted: Boolean
    unsorted: Boolean
    empty: Boolean
}
